package com.revature.data.postgres;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashSet;
import java.util.Set;

import com.revature.beans.Bicycle;
import com.revature.beans.Customer;
import com.revature.data.BicycleDAO;
import com.revature.utils.ConnectionUtil;


public class BicyclePostgres implements BicycleDAO  {
	
	@Override
	public int create(Bicycle dataToAdd) {
	
		int generatedId = 0;
		
		try (Connection conn = ConnectionUtil.getConnection()) {
		
			conn.setAutoCommit(false);
		
			String sql = "insert into Customers (id,firstName,lastName,username,passwd,status) "
					+ "values (default, ?, ?, ?, ?, ?)";
			String[] keys = {"id"}; // the name of the primary key column that will be autogenerated
			// creating the prepared statement
			PreparedStatement pStmt = conn.prepareStatement(sql, keys);
			// we need to set the values of the question marks
			pStmt.setString(1, dataToAdd.getModel()); // question mark index starts at 1
			pStmt.setString(2, dataToAdd.getBrand());
			pStmt.setString(3, dataToAdd.getDescription());
			
			
			
			// after setting the values, we can run the statement
			pStmt.executeUpdate();
			ResultSet resultSet = pStmt.getGeneratedKeys();
			
			if (resultSet.next()) { // "next" goes to the next row in the result set (or the first row)
				// getting the ID value from the result set
				generatedId = resultSet.getInt("id");
				conn.commit(); // running the TCL commit statement
			} else {
				conn.rollback();
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		return generatedId;

		}

	
	@Override
	public Bicycle getById(int id) {
		Bicycle bicycle = null;
		
		try (Connection conn = ConnectionUtil.getConnection()) {
			String sql = "select * from bicycle join make on bicycle.make_id = make.id where bicycle.id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, id);
			
			ResultSet resultSet = pStmt.executeQuery();
			
			if (resultSet.next()) {
				bicycle = new Bicycle();
				//getInt(1) gets the first column in my database which is bicycle.id
				bicycle.setId(resultSet.getInt(1));
				bicycle.setModel(resultSet.getString("model"));
				bicycle.setBrand(resultSet.getString("name"));
				bicycle.setDescription(resultSet.getString("order"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return bicycle;
	}

	@Override
	public Set<Bicycle> getAll() {
		Set<Bicycle> allBicycles = new HashSet<Bicycle>();
		
		try (Connection conn = ConnectionUtil.getConnection()) {
			String sql = "select * from bicycle";
			Statement stmt = conn.createStatement();
			ResultSet resultSet = stmt.executeQuery(sql);
			
			while (resultSet.next()) {
				Bicycle bicycle = new Bicycle();
				bicycle.setId(resultSet.getInt("id"));
				bicycle.setModel(resultSet.getString("model"));
				bicycle.setBrand(resultSet.getString("name"));
				bicycle.setDescription(resultSet.getString("order-id"));
				
				allBicycles.add(bicycle);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return allBicycles;
	}


	@Override
	public void update(Bicycle dataToUpdate) {
		try (Connection conn = ConnectionUtil.getConnection()) {
			conn.setAutoCommit(false);
			
			String sql = "update bicycle set model=?, order_id=? where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, dataToUpdate.getDescription());
			pStmt.setString(1, dataToUpdate.getModel());
			pStmt.setString(2, dataToUpdate.getBrand());
			pStmt.setInt(3, dataToUpdate.getId());
			
			int rowsAffected = pStmt.executeUpdate();
			
			if (rowsAffected==1) {
				conn.commit();
			} else {
				conn.rollback();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void delete(Bicycle dataToDelete) {
	
		
			try (Connection conn = ConnectionUtil.getConnection()) {
				conn.setAutoCommit(false);
				
				String sql = "delete from bicycle where id=?";
				PreparedStatement pStmt = conn.prepareStatement(sql);
				pStmt.setInt(1, dataToDelete.getId());
				
				int rowsAffected = pStmt.executeUpdate();
				
				if (rowsAffected==1) {
					conn.commit();
				} else {
					conn.rollback();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

	@Override
	public Set<Bicycle> getByBrand(String brand) {
		Set<Bicycle> bicycleSet = new HashSet<Bicycle>();
		Bicycle bicycle = null;
		
		try (Connection conn = ConnectionUtil.getConnection()) {
			String sql = "select * from bicycle join make on bicycle.make_id = make.id where name=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, brand);
			
			ResultSet resultSet = pStmt.executeQuery();
			
			if (resultSet.next()) {
				bicycle = new Bicycle();
				bicycle.setId(resultSet.getInt("id"));
				bicycle.setDescription(resultSet.getString("order"));
				bicycle.setModel(resultSet.getString("model"));
				bicycle.setBrand(resultSet.getString("name"));
				bicycleSet.add(bicycle);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return bicycleSet;
	}

	@Override
	public Set<Bicycle> getByModel(String model) {
		Set<Bicycle> bicycleSet = new HashSet<Bicycle>();
		Bicycle bicycle = null;
		
		try (Connection conn = ConnectionUtil.getConnection()) {
			String sql = "select * from bicycle join make on bicycle.make_id = make.id where model=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, model);
			
			ResultSet resultSet = pStmt.executeQuery();
			
			if (resultSet.next()) {
				bicycle = new Bicycle();
				//getInt(1) gets the first column in my database which is bicycle.id
				bicycle.setId(resultSet.getInt(1));
				bicycle.setDescription(resultSet.getString("order"));
				bicycle.setModel(resultSet.getString("model"));
				bicycle.setBrand(resultSet.getString("name"));
				bicycleSet.add(bicycle);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return bicycleSet;
	}
	@Override
	public Set<Bicycle> getByOrder(String order) {
		
	
			Set<Bicycle> bicycleSet = new HashSet<Bicycle>();
			Bicycle bicycle = null;
			
			try (Connection conn = ConnectionUtil.getConnection()) {
				String sql = "select * from bicycle join make on bicycle.make_id = make.id where model=?";
				PreparedStatement pStmt = conn.prepareStatement(sql);
				pStmt.setString(1, order);
				
				ResultSet resultSet = pStmt.executeQuery();
				
				if (resultSet.next()) {
					bicycle = new Bicycle();
					//getInt(1) gets the first column in my database which is bicycle.id
					bicycle.setId(resultSet.getInt(1));
					bicycle.setDescription(resultSet.getString("order"));
					bicycle.setModel(resultSet.getString("model"));
					bicycle.setBrand(resultSet.getString("name"));
					bicycleSet.add(bicycle);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			return bicycleSet;
		}


	@Override
	public Customer getByUsername(String username) {
		// TODO Auto-generated method stub
		return null;
	}
		
		}


