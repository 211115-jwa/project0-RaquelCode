package com.revature.dara.postgres;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashSet;
import java.util.Set;

import com.revature.beans.Customer;
import com.revature.data.CustomerDAO;
import com.revature.utils.ConnectionUtil;

public class CustomerPostgress implements CustomerDAO {

	@Override
	public int create(Customer dataToAdd) {
	
		int generatedId = 0;
		
		try (Connection conn = ConnectionUtil.getConnection()) {
		
			conn.setAutoCommit(false);
		
			String sql = "insert into Customers (id,firstName,lastName,username,passwd,status) "
					+ "values (default, ?, ?, ?, ?, ?)";
			String[] keys = {"id"}; // the name of the primary key column that will be autogenerated
			// creating the prepared statement
			PreparedStatement pStmt = conn.prepareStatement(sql, keys);
			// we need to set the values of the question marks
			pStmt.setString(1, dataToAdd.getFirstName()); // question mark index starts at 1
			pStmt.setString(2, dataToAdd.getLastName());
			pStmt.setString(3, dataToAdd.getUsername());
			pStmt.setString(4, dataToAdd.getPassword());
			
			
			// after setting the values, we can run the statement
			pStmt.executeUpdate();
			ResultSet resultSet = pStmt.getGeneratedKeys();
			
			if (resultSet.next()) { // "next" goes to the next row in the result set (or the first row)
				// getting the ID value from the result set
				generatedId = resultSet.getInt("id");
				conn.commit(); // running the TCL commit statement
			} else {
				conn.rollback();
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		return generatedId;

		}

	@Override
	public Customer getById(int id) {
		
Customer customer = null;
		
		try (Connection conn = ConnectionUtil.getConnection()) {
			String sql = "select * from Customers where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, id);
			
			ResultSet resultSet = pStmt.executeQuery();
			
			if (resultSet.next()) {
				customer = new Customer();
				customer.setId(id);
				customer.setFirstName(resultSet.getString("firstName"));
				customer.setLastName(resultSet.getString("lastName"));
				customer.setUsername(resultSet.getString("username"));
				customer.setPassword(resultSet.getString("passwd"));
				
				// TODO: get user's pets
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return customer;
}

	@Override
	public Set<Customer> getAll() {
		

Set<Customer> allCustomer = new HashSet<>();
		
		try (Connection conn = ConnectionUtil.getConnection()) {
			String sql = "select * from Customers";
			Statement stmt = conn.createStatement();
			ResultSet resultSet = stmt.executeQuery(sql);
			
			// while the result set has another row
			while (resultSet.next()) {
				// create the Pet object
				Customer customer = new Customer();
				// pull the data from each row in the result set
				// and put it into the java object so that we can use it here
				customer.setId(resultSet.getInt("id"));
				customer.setFirstName(resultSet.getString("firstName"));
				customer.setLastName(resultSet.getString("lastName"));
				customer.setUsername(resultSet.getString("username"));
				customer.setPassword(resultSet.getString("passwd"));
				
				// TODO: get user's Customer
				
				allCustomer.add(customer);
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return allCustomer;
	}


	@Override
	public void update(Customer dataToUpdate) {
		
		
		try (Connection conn = ConnectionUtil.getConnection()) {
			conn.setAutoCommit(false);
			
			String sql = "update Customers set "
					+ "firstname=?,username=?,passwd=?,status=? "
					+ "where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, dataToUpdate.getFirstName());
			pStmt.setString(1, dataToUpdate.getLastName());
			pStmt.setString(2, dataToUpdate.getUsername());
			pStmt.setString(3, dataToUpdate.getPassword());
			
			pStmt.setInt(5, dataToUpdate.getId());
			
			int rowsAffected = pStmt.executeUpdate();
			
			if (rowsAffected==1) {
				conn.commit();
			} else {
				conn.rollback();
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}



	@Override
	public void delete(Customer dataToDelete) {
		
		try (Connection conn = ConnectionUtil.getConnection()) {
			conn.setAutoCommit(false);
			
			String sql = "delete from Customers "
					+ "where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, dataToDelete.getId());
			
			int rowsAffected = pStmt.executeUpdate();
			
			if (rowsAffected==1) {
				// TODO: remove user's pet-owner relationships
				conn.commit();
			} else {
				conn.rollback();
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	


	@Override
	public Customer getByUsername(String username) {
		Customer customer = null;
		
		try (Connection conn = ConnectionUtil.getConnection()) {
			String sql = "select * from Customers where username=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, username);
			
			ResultSet resultSet = pStmt.executeQuery();
			
			if (resultSet.next()) {
				customer = new Customer();
				customer.setId(resultSet.getInt("id"));
				customer.setFirstName(resultSet.getString("firstname"));
				customer.setLastName(resultSet.getString("lastname"));
				customer.setUsername(resultSet.getString("username"));
				customer.setPassword(resultSet.getString("passwd"));
				
				// TODO: get user's pets
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return customer;
	}


	

	@Override
	public Set<Customer> getByStatus(String status) {
		// TODO Auto-generated method stub
		return null;
	}

}
